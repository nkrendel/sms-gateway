package com.jda.gateway.ui;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Collection;

import com.jda.gateway.AdvancedFileDownloader;
import com.jda.gateway.AdvancedFileDownloader.AdvancedDownloaderListener;
import com.jda.gateway.AdvancedFileDownloader.DownloaderEvent;
import com.jda.gateway.persistence.Handset;
import com.jda.gateway.persistence.HandsetLog;
import com.vaadin.addon.jpacontainer.JPAContainer;
import com.vaadin.addon.jpacontainer.JPAContainerFactory;
import com.vaadin.addon.jpacontainer.JPAContainerItem;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container.Filter;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.filter.Compare;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.Table.ColumnHeaderMode;
import com.vaadin.ui.VerticalLayout;

public class HistoryReport extends CustomComponent {

  /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

  @AutoGenerated
  private VerticalLayout mainLayout;

  @AutoGenerated
  private Table historyTable;

  @AutoGenerated
  private HorizontalLayout sortByLayout;

  @AutoGenerated
  private ComboBox sortByComboBox;

  @AutoGenerated
  private HorizontalLayout headerLayout;

  @AutoGenerated
  private Button exportButton;

  @AutoGenerated
  private Label titleLabel;

  @AutoGenerated
  private Button backButton;

  private static final long serialVersionUID = 7455780094048810153L;

  private static final String OPEN_HEADER = "<h1>";
  private static final String CLOSE_HEADER = "</h1>";
  private static final String HISTORY_REPORT_TITLE = " History Report";
  private static final String DATE_ASCENDING = "Date Ascending";
  private static final String DATE_DESCENDING = "Date Descending";
  private static final String TEXT_ASCENDING = "Text Ascending";
  private static final String TEXT_DESCENDING = "Text Descending";

  private HorizontalSplitPanel parentComponent;
  private Component previousComponent;
  private Handset handset;

  /**
   * The constructor should first build the main layout, set the composition
   * root and then do any custom initialization.
   * 
   * The constructor will not be automatically regenerated by the visual editor.
   */
  public HistoryReport(HorizontalSplitPanel parent, Component previousComponent) {
    this.parentComponent = parent;
    this.previousComponent = previousComponent;

    buildMainLayout();
    setCompositionRoot(mainLayout);

    // set title label to accept HTML
    titleLabel.setContentMode(ContentMode.HTML);

    // create and do initial population of history log table
    populateHistoryTable();

    final AdvancedFileDownloader downloader = new AdvancedFileDownloader();
    downloader.addAdvancedDownloaderListener(new AdvancedDownloaderListener() {

      /**
       * This method will be invoked just before the download starts. Thus, a
       * new file path can be set.
       * 
       * @param downloadEvent
       */
      @Override
      public void beforeDownload(DownloaderEvent downloadEvent) {
        String filePath = null;
        try {
          filePath = createCSVFile();
        } catch (IOException e) {
          Notification.show(e.getMessage());
          e.printStackTrace();
        }
        downloader.setFilePath(filePath);
      }

      @SuppressWarnings("unchecked")
      private String createCSVFile() throws IOException {
        File tmpFile = File.createTempFile("_sms_history", ".csv");
        final JPAContainer<HandsetLog> logs = (JPAContainer<HandsetLog>) historyTable.getContainerDataSource();
        PrintWriter pw = new PrintWriter(new FileOutputStream(tmpFile));
        pw.println("Date, Message");
        Collection<Object> historyItems = logs.getItemIds();
        for (Object item : historyItems) {
          final HandsetLog logEntry = logs.getItem(item).getEntity();
//          SimpleDateFormat sdf = new SimpleDateFormat();
//          return String.format("<br>%s<br><large>%s</large>", sdf.format(dateTime), messageText);
          pw.println(String.format("%s,%s", logEntry.getDateTime(), logEntry.getMessageText()));
        }
        pw.close();
        return tmpFile.getPath();
      }

    });

    downloader.extend(exportButton);

    // sort-by combobox
    sortByComboBox.addItem(DATE_ASCENDING);
    sortByComboBox.addItem(DATE_DESCENDING);
    sortByComboBox.addItem(TEXT_ASCENDING);
    sortByComboBox.addItem(TEXT_DESCENDING);
    sortByComboBox.setNullSelectionAllowed(false);
    sortByComboBox.setValue(DATE_DESCENDING);
    historyTable.sort(new String[] { "dateTime" }, new boolean[] { false });

    // hook up event handlers
    wireEventHandlers();
  }

  private void wireEventHandlers() {

    /*
     * back button click handler
     */
    backButton.addClickListener(new Button.ClickListener() {

      @Override
      public void buttonClick(ClickEvent event) {
        parentComponent.setSecondComponent(HistoryReport.this.previousComponent);
      }

    });

    /*
     * export button click handler
     */
    /*
     * exportButton.addClickListener(new Button.ClickListener() {
     * 
     * @Override public void buttonClick(ClickEvent event) { final
     * JPAContainer<HandsetLog> logs = (JPAContainer<HandsetLog>)
     * historyTable.getContainerDataSource(); final CSVStreamResource
     * streamSource = new CSVStreamResource(logs); // String now = new
     * SimpleDateFormat("yyyy-MM-dd_HHmmss").format(new Date()); //
     * app.openPdf(streamSource, "example_" + now); }
     * 
     * });
     */

    /*
     * action list click handler
     */
    sortByComboBox.addValueChangeListener(new Property.ValueChangeListener() {

      @Override
      public void valueChange(ValueChangeEvent event) {
        final String sortByValue = (String) sortByComboBox.getValue();

        if (sortByValue.equals(DATE_ASCENDING)) {
          historyTable.sort(new String[] { "dateTime" }, new boolean[] { true });
        } else if (sortByValue.equals(DATE_DESCENDING)) {
          historyTable.sort(new String[] { "dateTime" }, new boolean[] { false });
        } else if (sortByValue.equals(TEXT_ASCENDING)) {
          historyTable.sort(new String[] { "messageText" }, new boolean[] { true });
        } else if (sortByValue.equals(TEXT_DESCENDING)) {
          historyTable.sort(new String[] { "messageText" }, new boolean[] { false });
        }
      }

    });

  }

  public void setHandset(final Handset handset) {
    this.handset = handset;
    setTitle();
    filterHistoryTable();
  }

  public void refreshHistory() {
    final JPAContainer<HandsetLog> logs = (JPAContainer<HandsetLog>) historyTable.getContainerDataSource();
    logs.refresh(); // slow
  }

  private void setTitle() {
    StringBuffer sb = new StringBuffer();
    sb.append(OPEN_HEADER);
    sb.append(GatewayUI.HANDSET_PREFIX);
    sb.append(String.format("%03d", this.handset.getId()));
    sb.append(HISTORY_REPORT_TITLE);
    sb.append(CLOSE_HEADER);
    titleLabel.setValue(sb.toString());
  }

  private void populateHistoryTable() {
    JPAContainer<HandsetLog> logs = JPAContainerFactory.make(HandsetLog.class, SMSGateway.PERSISTENCE_UNIT);

    // Bind containers to components
    historyTable.setContainerDataSource(logs);

    // Set up sorting if the natural order is not appropriate
    // phones.sort(new String[] { "number" }, new boolean[] { false });

    // Set the filtering mode
    historyTable.setSelectable(false);
    historyTable.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
    historyTable.setVisibleColumns("html");
//    historyTable.setVisibleColumns("dateTime", "messageText");
    historyTable.setImmediate(true);

    // override html column with a component, sorting as by the raw html field
    historyTable.addGeneratedColumn("html", new ColumnGenerator() {
      public Component generateCell(final Table source, final Object itemId, final Object columnId) {
        final JPAContainerItem<HandsetLog> item = (JPAContainerItem<HandsetLog>) source.getItem(itemId);
        final HandsetLog logEntry = item.getEntity();
        final String html = logEntry.getHtml();
        final Label label = new Label(html, ContentMode.HTML);
        label.setSizeUndefined();
        label.setReadOnly(true);

        return label;
      }
    }); 
  }

  private void filterHistoryTable() {
    final JPAContainer<HandsetLog> logs = (JPAContainer<HandsetLog>) historyTable.getContainerDataSource();
    // (really slows things down!) logs.refresh(); // in case new entries were
    // added

    // clear all existing filters
    logs.removeAllContainerFilters();

    // set filter
    if (this.handset != null) {
      Filter filter = new Compare.Equal("handset", this.handset);
      logs.addContainerFilter(filter);
    }
  }

  @AutoGenerated
  private VerticalLayout buildMainLayout() {
    // common part: create layout
    mainLayout = new VerticalLayout();
    mainLayout.setImmediate(false);
    mainLayout.setWidth("100%");
    mainLayout.setHeight("100%");
    mainLayout.setMargin(true);
    mainLayout.setSpacing(true);
    
    // top-level component properties
    setWidth("100.0%");
    setHeight("100.0%");
    
    // headerLayout
    headerLayout = buildHeaderLayout();
    mainLayout.addComponent(headerLayout);
    
    // sortByLayout
    sortByLayout = buildSortByLayout();
    mainLayout.addComponent(sortByLayout);
    
    // historyTable
    historyTable = new Table();
    historyTable.setImmediate(false);
    historyTable.setWidth("100.0%");
    historyTable.setHeight("100.0%");
    mainLayout.addComponent(historyTable);
    mainLayout.setExpandRatio(historyTable, 1.0f);
    mainLayout.setComponentAlignment(historyTable, new Alignment(6));
    
    return mainLayout;
  }

  @AutoGenerated
  private HorizontalLayout buildHeaderLayout() {
    // common part: create layout
    headerLayout = new HorizontalLayout();
    headerLayout.setImmediate(false);
    headerLayout.setWidth("100.0%");
    headerLayout.setHeight("-1px");
    headerLayout.setMargin(false);
    
    // backButton
    backButton = new Button();
    backButton.setCaption("Back");
    backButton.setImmediate(true);
    backButton.setWidth("-1px");
    backButton.setHeight("-1px");
    headerLayout.addComponent(backButton);
    headerLayout.setComponentAlignment(backButton, new Alignment(33));
    
    // titleLabel
    titleLabel = new Label();
    titleLabel.setImmediate(false);
    titleLabel.setWidth("-1px");
    titleLabel.setHeight("-1px");
    titleLabel.setValue("History Report");
    headerLayout.addComponent(titleLabel);
    headerLayout.setComponentAlignment(titleLabel, new Alignment(48));
    
    // exportButton
    exportButton = new Button();
    exportButton.setStyleName("v-button-link");
    exportButton.setCaption("Export as CSV");
    exportButton.setImmediate(true);
    exportButton.setDescription("Export the report as a comma-separated-values file");
    exportButton.setWidth("-1px");
    exportButton.setHeight("-1px");
    headerLayout.addComponent(exportButton);
    headerLayout.setComponentAlignment(exportButton, new Alignment(34));
    
    return headerLayout;
  }

  @AutoGenerated
  private HorizontalLayout buildSortByLayout() {
    // common part: create layout
    sortByLayout = new HorizontalLayout();
    sortByLayout.setImmediate(false);
    sortByLayout.setWidth("-1px");
    sortByLayout.setHeight("-1px");
    sortByLayout.setMargin(false);
    
    // sortByComboBox
    sortByComboBox = new ComboBox();
    sortByComboBox.setCaption("Sort By:");
    sortByComboBox.setImmediate(true);
    sortByComboBox.setWidth("-1px");
    sortByComboBox.setHeight("-1px");
    sortByLayout.addComponent(sortByComboBox);
    
    return sortByLayout;
  }

}
