package com.jda.gateway.ui;

import org.vaadin.appfoundation.authentication.SessionHandler;
import org.vaadin.appfoundation.authentication.data.User;
import org.vaadin.appfoundation.authentication.exceptions.InvalidCredentialsException;
import org.vaadin.appfoundation.authentication.exceptions.PasswordRequirementException;
import org.vaadin.appfoundation.authentication.exceptions.PasswordsDoNotMatchException;
import org.vaadin.appfoundation.authentication.exceptions.TooShortPasswordException;
import org.vaadin.appfoundation.authentication.util.UserUtil;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.UserError;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;

public class ChangePasswordForm extends CustomComponent {

  /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

  @AutoGenerated
  private VerticalLayout mainLayout;

  @AutoGenerated
  private Panel outerPanel;

  @AutoGenerated
  private VerticalLayout outerPanelLayout;

  @AutoGenerated
  private VerticalLayout footerLayout;

  @AutoGenerated
  private Label feedbackLabel;

  @AutoGenerated
  private HorizontalLayout buttonLayout;

  @AutoGenerated
  private Button cancelButton;

  @AutoGenerated
  private Button saveButton;

  @AutoGenerated
  private Panel innerPanel;

  @AutoGenerated
  private FormLayout changePasswordFormLayout;

  @AutoGenerated
  private PasswordField verifiedNewPasswordField;

  @AutoGenerated
  private PasswordField newPasswordField;

  @AutoGenerated
  private PasswordField currentPasswordField;

  private static final long serialVersionUID = 1L;

  private static final String INVALID_CREDENTIALS = "Invalid current password entered";
  private static final String TOO_SHORT = "New password must be at least 6 characters";
  private static final String NO_MATCH = "New password and verification password do not match";
  private static final String REQUIREMENTS = "Password must have at least one of:  uppercase, lowercase, number";

  /**
   * The constructor should first build the main layout, set the
   * composition root and then do any custom initialization.
   *
   * The constructor will not be automatically regenerated by the
   * visual editor.
   */
  public ChangePasswordForm() {
    buildMainLayout();
    setCompositionRoot(mainLayout);

    // save button click listener
    saveButton.addClickListener(new Button.ClickListener() {
      @Override
      public void buttonClick(ClickEvent event) {
        final User user = SessionHandler.get();
        changePassword(user, currentPasswordField.getValue(), newPasswordField.getValue(), verifiedNewPasswordField.getValue());
      }
    });
    
    // cancel button click handler
    cancelButton.addClickListener(new Button.ClickListener() {
      @Override
      public void buttonClick(ClickEvent event) {
        ((SMSGateway)UI.getCurrent()).loadProtectedResources();
        Notification.show("Cancelled.");
      }
    });
  }

  protected void changePassword(User user, final String currentPassword, final String newPassword, final String verifiedNewPassword) {
    if ((currentPassword == null || currentPassword.length() == 0) ||
        (newPassword == null || newPassword.length() == 0) ||
        (verifiedNewPassword == null || verifiedNewPassword.length() == 0)) {
      saveButton.setComponentError(new UserError("Please enter current password, new passord, and verification"));
      return;
    }

    try {
      UserUtil.changePassword(user, currentPassword, newPassword, verifiedNewPassword);
      ((SMSGateway)UI.getCurrent()).loadProtectedResources();
      Notification.show("Password Changed.");
    }
    catch (InvalidCredentialsException e) {
      feedbackLabel.setValue(INVALID_CREDENTIALS);
    } 
    catch (TooShortPasswordException e) {
      feedbackLabel.setValue(TOO_SHORT);
    } 
    catch (PasswordsDoNotMatchException e) {
      feedbackLabel.setValue(NO_MATCH);
    } 
    catch (PasswordRequirementException e) {
      feedbackLabel.setValue(REQUIREMENTS);
    }
  }

  @AutoGenerated
  private VerticalLayout buildMainLayout() {
    // common part: create layout
    mainLayout = new VerticalLayout();
    mainLayout.setImmediate(false);
    mainLayout.setWidth("100%");
    mainLayout.setHeight("100%");
    mainLayout.setMargin(false);
    
    // top-level component properties
    setWidth("100.0%");
    setHeight("100.0%");
    
    // outerPanel
    outerPanel = buildOuterPanel();
    mainLayout.addComponent(outerPanel);
    mainLayout.setComponentAlignment(outerPanel, Alignment.MIDDLE_CENTER);
    
    return mainLayout;
  }

  @AutoGenerated
  private Panel buildOuterPanel() {
    // common part: create layout
    outerPanel = new Panel();
    outerPanel.setCaption("Change Password");
    outerPanel.setImmediate(false);
    outerPanel.setWidth("330px");
    outerPanel.setHeight("220px");
    
    // outerPanelLayout
    outerPanelLayout = buildOuterPanelLayout();
    outerPanel.setContent(outerPanelLayout);
    
    return outerPanel;
  }

  @AutoGenerated
  private VerticalLayout buildOuterPanelLayout() {
    // common part: create layout
    outerPanelLayout = new VerticalLayout();
    outerPanelLayout.setCaption("Change Password");
    outerPanelLayout.setImmediate(false);
    outerPanelLayout.setWidth("100.0%");
    outerPanelLayout.setHeight("100.0%");
    outerPanelLayout.setMargin(false);
    outerPanelLayout.setSpacing(true);
    
    // innerPanel
    innerPanel = buildInnerPanel();
    outerPanelLayout.addComponent(innerPanel);
    
    // footerLayout
    footerLayout = buildFooterLayout();
    outerPanelLayout.addComponent(footerLayout);
    outerPanelLayout.setComponentAlignment(footerLayout, new Alignment(48));
    
    return outerPanelLayout;
  }

  @AutoGenerated
  private Panel buildInnerPanel() {
    // common part: create layout
    innerPanel = new Panel();
    innerPanel.setStyleName("light");
    innerPanel.setImmediate(false);
    innerPanel.setWidth("325px");
    innerPanel.setHeight("125px");
    
    // changePasswordFormLayout
    changePasswordFormLayout = buildChangePasswordFormLayout();
    innerPanel.setContent(changePasswordFormLayout);
    
    return innerPanel;
  }

  @AutoGenerated
  private FormLayout buildChangePasswordFormLayout() {
    // common part: create layout
    changePasswordFormLayout = new FormLayout();
    changePasswordFormLayout.setImmediate(false);
    changePasswordFormLayout.setWidth("100.0%");
    changePasswordFormLayout.setHeight("100.0%");
    changePasswordFormLayout.setMargin(true);
    changePasswordFormLayout.setSpacing(true);
    
    // currentPasswordField
    currentPasswordField = new PasswordField();
    currentPasswordField.setCaption("Current Password");
    currentPasswordField.setImmediate(false);
    currentPasswordField.setWidth("-1px");
    currentPasswordField.setHeight("-1px");
    currentPasswordField.setRequired(true);
    changePasswordFormLayout.addComponent(currentPasswordField);
    
    // newPasswordField
    newPasswordField = new PasswordField();
    newPasswordField.setCaption("New Password:");
    newPasswordField.setImmediate(false);
    newPasswordField.setDescription("Enter new password");
    newPasswordField.setWidth("-1px");
    newPasswordField.setHeight("-1px");
    newPasswordField.setRequired(true);
    changePasswordFormLayout.addComponent(newPasswordField);
    
    // verifiedNewPasswordField
    verifiedNewPasswordField = new PasswordField();
    verifiedNewPasswordField.setCaption("Verify New Password:");
    verifiedNewPasswordField.setImmediate(false);
    verifiedNewPasswordField.setDescription("Re-enter new password to verify");
    verifiedNewPasswordField.setWidth("-1px");
    verifiedNewPasswordField.setHeight("-1px");
    verifiedNewPasswordField.setRequired(true);
    changePasswordFormLayout.addComponent(verifiedNewPasswordField);
    
    return changePasswordFormLayout;
  }

  @AutoGenerated
  private VerticalLayout buildFooterLayout() {
    // common part: create layout
    footerLayout = new VerticalLayout();
    footerLayout.setImmediate(false);
    footerLayout.setWidth("100.0%");
    footerLayout.setHeight("-1px");
    footerLayout.setMargin(false);
    footerLayout.setSpacing(true);
    
    // buttonLayout
    buttonLayout = buildButtonLayout();
    footerLayout.addComponent(buttonLayout);
    footerLayout.setExpandRatio(buttonLayout, 1.0f);
    footerLayout.setComponentAlignment(buttonLayout, new Alignment(48));
    
    // feedbackLabel
    feedbackLabel = new Label();
    feedbackLabel.setImmediate(false);
    feedbackLabel.setWidth("100.0%");
    feedbackLabel.setHeight("-1px");
    feedbackLabel.setValue(" ");
    footerLayout.addComponent(feedbackLabel);
    footerLayout.setComponentAlignment(feedbackLabel, new Alignment(24));
    
    return footerLayout;
  }

  @AutoGenerated
  private HorizontalLayout buildButtonLayout() {
    // common part: create layout
    buttonLayout = new HorizontalLayout();
    buttonLayout.setImmediate(false);
    buttonLayout.setWidth("-1px");
    buttonLayout.setHeight("-1px");
    buttonLayout.setMargin(false);
    buttonLayout.setSpacing(true);
    
    // saveButton
    saveButton = new Button();
    saveButton.setCaption("Save");
    saveButton.setImmediate(true);
    saveButton.setWidth("-1px");
    saveButton.setHeight("-1px");
    buttonLayout.addComponent(saveButton);
    
    // cancelButton
    cancelButton = new Button();
    cancelButton.setCaption("Cancel");
    cancelButton.setImmediate(true);
    cancelButton.setWidth("-1px");
    cancelButton.setHeight("-1px");
    buttonLayout.addComponent(cancelButton);
    
    return buttonLayout;
  }

}
